If the site is available: https://dev.to/oneofthedevs/docker-angular-nginx-37e4
In the root folder - Create a docker file called DockerFile
Add the following to the file.

### STAGE 1:BUILD ###
# Defining a node image to be used as giving it an alias of "build"
# Which version of Node image to use depends on project dependencies 
# This is needed to build and compile our code 
# while generating the docker image

FROM node:18 as build

# Create a Virtual directory inside the docker image
WORKDIR /dist/src/app

# Copy files to virtual directory
# COPY package.json package-lock.json ./
# Run command in Virtual directory

RUN npm cache clean --force

# Copy files from local machine to virtual directory in docker image
COPY . .

RUN npm install
RUN npm run build --prod

### STAGE 2:RUN ###
# Defining nginx image to be used
FROM nginx:latest AS ngi

# Copying compiled code and nginx config to different folder - Remember to change the ** to a preferred name
# NOTE: This path may change according to your project's output folder 
COPY --from=build /dist/src/app/dist/**name** /usr/share/nginx/html
COPY /nginx.conf  /etc/nginx/conf.d/default.conf

# Exposing a port, here it means that inside the container 
# the app will be using Port 80 while running
EXPOSE 80

Create an ignorefile called .dockerignore
Add the following: 

.git
.editorconfig
/.vscode/*
/node_modules
/e2e
/docs
.gitignore
*.

Step 3: Create nginx.conf

We'll be using Nginx to host the angular build inside the container. So for this, we need to create a configuration file for nginx.
Create a file inside main folder and name it "nginx.conf".

NOTE: We're telling nginx to listen to port 80 here as that is the port we had exposed in Dockerfile (refer). This needs to be same as what we defined in there

server {
  listen 80;
  sendfile on;
  default_type application/octet-stream;

  gzip on;
  gzip_http_version 1.1;
  gzip_disable      "MSIE [1-6]\.";
  gzip_min_length   256;
  gzip_vary         on;
  gzip_proxied      expired no-cache no-store private auth;
  gzip_types        text/plain text/css application/json application/javascript application/x-javascript text/xml application/xml application/xml+rss text/javascript;
  gzip_comp_level   9;

  root /usr/share/nginx/html;

  location / {
    try_files $uri $uri/ /index.html =404;
  }
}


Step 4: Creating a docker image
docker build -t ng-docker-app:v1.0.0 -f ./Dockerfile .

After this, we should have a docker image created in your system. To get the list of docker images in your system, write the following in the terminal
docker image ls

Step 5: Create a docker container
docker run -p 8000:80 -d ng-docker-app:v1.0.0

-p: Port
Here you'll need to define a port on which the container will be hosted and the port on which app is hosted inside the container
Syntex: <host-port>:<docker-port>
-d: Detach
If this is not specified, the docker will keep the console running

NOTE: We had exposed port 80 in Dockerfile and assigned nginx to listen to port 80, so <docker-port> has to be the same here as well

To get the list of currently running containers in your system, you can get this by typing

docker container ls

